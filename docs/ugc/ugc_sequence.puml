@startuml
'https://plantuml.com/sequence-diagram

skinparam componentStyle uml2
skinparam stereotypePosition bottom
skinparam ParticipantPadding 20
skinparam BoxPadding 10
skinparam wrapWidth 300

hide footbox

title Movies UGC Sequence (v2)
header %date("dd MMMM YYYY")

actor Client
participant Api
participant Model
database Store <<MongoDB>>
participant EventHandler
queue Kafka

Client -> Api: POST http://127.0.0.1:8000/events?key=str \n-d {data: dict}\n-h Cookies: access_token=jwt_token
note over Api
{
  entity_type: str
  entity: str
  action: str
}
end note

Api -> EventHandler: new EventHandler(topic: str, key: str, data: dict)
note over EventHandler
BaseEventHandler
    user_id: uuid
    service: str
    timestamp: datetime
    entity_type: str
    entity: str
    action: str
end note

EventHandler -> Kafka: producer.send(topic: str, value: bytes, key: bytes)
note over Kafka
topic: <<events>>
end note

Api --> Client: 202 ACCEPTED

newpage Movies UGC Sequence (v2)
header %date("dd MMMM YYYY")

== CREATE ==

Client -> Api: POST http://127.0.0.1:8000/grades \n-d {data: dict}\n-h Cookies: access_token=jwt_token
note over Api
{
  film_id: uuid
  rating: smallint
}
end note
Api -> Model: new GradeModel(data: dict)
note over Model
GradeModel:
    id: uuid
    user_id: uuid
    timestamp: datetime
    film_id: uuid
    rating: smallint
end note
Model -> Store: save to <<grades>>

Api -> EventHandler: new EventHandler(topic: str, key: str, data: dict)
note over EventHandler
GradeEventHandler:
    user_id: uuid
    timestamp: datetime
    film_id: uuid
    rating: smallint
end note

EventHandler -> Kafka: producer.send(topic: str, value: bytes, key: bytes)
note over Kafka
topic: <<grades>>
end note

Api --> Client: 202 ACCEPTED

== UPDATE ==
Client -> Api: PATCH http://127.0.0.1:8000/grades/{film_id:uuid} \n-d {data: dict}\n-h Cookies: access_token=jwt_token
note over Api
{
  rating: smallint
}
end note
Api -> Store: update_grade_by(film_id: uuid)

Api -> EventHandler: new EventHandler(topic: str, key: str, data: dict)
note over EventHandler
GradeEventHandler:
    user_id: uuid
    timestamp: datetime
    film_id: uuid
    rating: smallint
end note

EventHandler -> Kafka: producer.send(topic: str, value: bytes, key: bytes)
note over Kafka
topic: <<grades>>
end note

Api --> Client: 200 OK -d {data: json} <<GradeModel>>

== GET ==
Client -> Api: GET http://127.0.0.1:8000/grades/{film_id:uuid} \n-h Cookies: access_token=jwt_token
Api -> Store: get_grade_by(film_id: uuid)
Api --> Client: 200 OK -d {data: json} <<GradeModel>>

== DELETE ==
Client -> Api: DELETE http://127.0.0.1:8000/grades/{film_id:uuid} \n-h Cookies: access_token=jwt_token
Api -> Store: delete_grade_by(film_id: uuid)
Api -> EventHandler: new EventHandler(topic: str, key: str, data: dict)
note over EventHandler
GradeEventHandler:
    user_id: uuid
    timestamp: datetime
    film_id: uuid
    rating: smallint <<0>>
end note

EventHandler -> Kafka: producer.send(topic: str, value: bytes, key: bytes)
note over Kafka
topic: <<grades>>
end note
Api --> Client: 204 NO CONTENT

@enduml