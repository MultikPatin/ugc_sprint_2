[tool.poetry]
name = "ugc-sprint-2"
version = "0.1.0"
description = ""
authors = ["Dmitry Patin <multik.patin@yandex.ru>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
pydantic-settings = "^2.2.1"
certifi = "^2024.2.2"
pydantic = { extras = ["email"], version = "^2.7.0" }
backoff = { version = "^2.2.1", optional = true }
#fastapi = { version = "^0.110.0", optional = true }
#uvicorn = { version = "^0.29.0", optional = true }
#redis = { version = "^5.0.3", optional = true }
gunicorn = { version = "^21.2.0", optional = true }
#alembic = { version = "^1.13.1", optional = true }
#sqlalchemy = { version = "2.0.29", extras = ["asyncio"], optional = true }
#asyncpg = { version = "^0.29.0", optional = true }
#werkzeug = { version = "^3.0.2", optional = true }
#async-fastapi-jwt-auth = { version = "^0.6.4", optional = true }
#psycopg2-binary = { version = "^2.9.9", optional = true }
elasticsearch = { extras = ["async"], version = "^8.12.1", optional = true }
#django = { version = "^5.0.1", optional = true }
#django-split-settings = { version = "^1.2.0", optional = true }
#django-debug-toolbar = { version = "^4.3.0", optional = true }
#uwsgi = { version = "^2.0.0", optional = true }
#opentelemetry-api = { version = "^1.24.0", optional = true }
#opentelemetry-sdk = { version = "^1.24.0", optional = true }
#opentelemetry-instrumentation-fastapi = { version = "^0.45b0", optional = true }
#opentelemetry-exporter-jaeger = { version = "^1.21.0", optional = true }
#authlib = { version = "^1.3.0", optional = true }
#itsdangerous = { version = "^2.2.0", optional = true }
#orjson = { version = "^3.10.3", optional = true }
#fastapi-limiter = { version = "^0.1.6", optional = true }
clickhouse-driver = { version = "^0.2.7", optional = true }
pyjwt = { version = "^2.8.0", optional = true }
flask-swagger-ui = { version = "^4.11.1", optional = true }
flask = { extras = ["async"], version = "^3.0.3", optional = true }
kafka-python = { version = "^2.0.2", optional = true }
gevent = { version = "^24.2.1", optional = true }
#types-redis = { version = "^4.6.0.20240425", optional = true }

[tool.poetry.extras]
etl_analytics = [
    "backoff",
    "kafka-python",
    "clickhouse-driver",
]
ugc = [
    "flask-swagger-ui",
    "flask",
    "kafka-python",
    "gevent",
    "gunicorn",
    "backoff",
    "pyjwt",
]

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
ruff = "^0.4.4"
pre-commit = "^3.6.2"
mypy = "^1.10.0"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^8.1.1"
pytest-asyncio = "0.21.1"
aiohttp = "^3.9.3"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "UP", # pyupgrade
    "F", # pyflakes
    "I", # isort
    "C", # flake8-comprehensions
    "B", # flake8-bugbear
    "SIM", # flake8-simplify
]
ignore = [
    "B905",
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

fixable = ["ALL"]
unfixable = []

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".sh",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "tests",
    "dist",
    "node_modules",
    "venv",
    "*/settings.py",
    "*/migrations/",
    "*/config/components/",
    "tasks",
]
per-file-ignores = { }

line-length = 80

dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

target-version = "py311"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 60

[tool.mypy]
python_version = "3.11"
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
ignore_missing_imports = true
exclude = [
    "docs",
    "migrations",
    "tests",
    "static"
]